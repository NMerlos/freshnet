import React, { useState } from 'react';
import { Card, CardContent, CardHeader } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { 
  Package, 
  AlertTriangle, 
  Edit, 
  Save, 
  X,
  Plus,
  Minus,
  DollarSign
} from "lucide-react";

const categoryColors = {
  fruits: "bg-red-100 text-red-700 border-red-200",
  vegetables: "bg-green-100 text-green-700 border-green-200", 
  herbs: "bg-emerald-100 text-emerald-700 border-emerald-200",
  dried_fruits: "bg-orange-100 text-orange-700 border-orange-200",
  organic: "bg-purple-100 text-purple-700 border-purple-200"
};

const categoryIcons = {
  fruits: "üçé",
  vegetables: "ü•ï", 
  herbs: "üåø",
  dried_fruits: "üçá",
  organic: "üå±"
};

export default function ProductCard({ product, onUpdate }) {
  const [isEditing, setIsEditing] = useState(false);
  const [editData, setEditData] = useState({
    current_stock: product.current_stock,
    price_per_unit: product.price_per_unit,
    min_stock_alert: product.min_stock_alert
  });

  const isLowStock = product.current_stock <= (product.min_stock_alert || 10);

  const handleSave = () => {
    onUpdate(product.id, editData);
    setIsEditing(false);
  };

  const handleCancel = () => {
    setEditData({
      current_stock: product.current_stock,
      price_per_unit: product.price_per_unit,
      min_stock_alert: product.min_stock_alert
    });
    setIsEditing(false);
  };

  const adjustStock = (amount) => {
    const newStock = Math.max(0, (editData.current_stock || 0) + amount);
    setEditData(prev => ({ ...prev, current_stock: newStock }));
  };

  return (
    <Card className={`transition-all duration-300 hover:shadow-lg ${
      isLowStock ? 'border-orange-300 bg-orange-50/50' : 'bg-white/80 backdrop-blur-sm'
    }`}>
      <CardHeader className="pb-4">
        <div className="flex items-start justify-between">
          <div className="flex items-center gap-3">
            <div className="text-3xl">
              {categoryIcons[product.category] || "üì¶"}
            </div>
            <div>
              <h3 className="text-lg font-bold text-gray-900">{product.name}</h3>
              <div className="flex items-center gap-2 mt-1">
                <Badge className={`${categoryColors[product.category]} border text-xs`}>
                  {product.category}
                </Badge>
                {isLowStock && (
                  <Badge className="bg-orange-100 text-orange-700 border-orange-200 text-xs">
                    <AlertTriangle className="w-3 h-3 mr-1" />
                    Low Stock
                  </Badge>
                )}
              </div>
            </div>
          </div>
          
          <Button
            variant="ghost"
            size="icon"
            onClick={() => setIsEditing(!isEditing)}
          >
            <Edit className="w-4 h-4" />
          </Button>
        </div>
      </CardHeader>
      
      <CardContent className="space-y-4">
        {/* Stock Level */}
        <div className="flex items-center justify-between">
          <span className="text-sm text-gray-600">Current Stock</span>
          {isEditing ? (
            <div className="flex items-center gap-2">
              <Button 
                variant="outline" 
                size="icon" 
                className="h-8 w-8"
                onClick={() => adjustStock(-1)}
              >
                <Minus className="w-3 h-3" />
              </Button>
              <Input
                type="number"
                value={editData.current_stock || 0}
                onChange={(e) => setEditData(prev => ({ ...prev, current_stock: parseInt(e.target.value) || 0 }))}
                className="w-20 h-8 text-center"
              />
              <Button 
                variant="outline" 
                size="icon" 
                className="h-8 w-8"
                onClick={() => adjustStock(1)}
              >
                <Plus className="w-3 h-3" />
              </Button>
            </div>
          ) : (
            <span className={`font-semibold ${isLowStock ? 'text-orange-600' : 'text-gray-900'}`}>
              {product.current_stock} {product.unit}
            </span>
          )}
        </div>

        {/* Price */}
        <div className="flex items-center justify-between">
          <span className="text-sm text-gray-600">Price per {product.unit}</span>
          {isEditing ? (
            <div className="flex items-center gap-1">
              <DollarSign className="w-4 h-4 text-gray-400" />
              <Input
                type="number"
                step="0.01"
                value={editData.price_per_unit || 0}
                onChange={(e) => setEditData(prev => ({ ...prev, price_per_unit: parseFloat(e.target.value) || 0 }))}
                className="w-20 h-8"
              />
            </div>
          ) : (
            <span className="font-semibold text-gray-900">
              ${product.price_per_unit?.toFixed(2)}
            </span>
          )}
        </div>

        {/* Minimum Stock Alert */}
        <div className="flex items-center justify-between">
          <span className="text-sm text-gray-600">Min Stock Alert</span>
          {isEditing ? (
            <Input
              type="number"
              value={editData.min_stock_alert || 0}
              onChange={(e) => setEditData(prev => ({ ...prev, min_stock_alert: parseInt(e.target.value) || 0 }))}
              className="w-20 h-8"
            />
          ) : (
            <span className="text-sm text-gray-500">
              {product.min_stock_alert} {product.unit}
            </span>
          )}
        </div>

        {/* Supplier */}
        {product.supplier && (
          <div className="flex items-center justify-between">
            <span className="text-sm text-gray-600">Supplier</span>
            <span className="text-sm text-gray-500">{product.supplier}</span>
          </div>
        )}

        {/* Action Buttons */}
        {isEditing && (
          <div className="flex gap-2 pt-2">
            <Button onClick={handleSave} size="sm" className="flex-1 bg-emerald-600 hover:bg-emerald-700">
              <Save className="w-4 h-4 mr-2" />
              Save
            </Button>
            <Button onClick={handleCancel} variant="outline" size="sm" className="flex-1">
              <X className="w-4 h-4 mr-2" />
              Cancel
            </Button>
          </div>
        )}
      </CardContent>
    </Card>
  );
}