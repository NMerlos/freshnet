import React, { useState, useEffect } from 'react';
import { Order } from "@/entities/Order";
import { Link, useNavigate } from "react-router-dom";
import { createPageUrl } from "@/utils";
import ConversationView from "../components/orders/ConversationView";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Skeleton } from "@/components/ui/skeleton";
import { Badge } from "@/components/ui/badge";
import { 
  ArrowLeft, 
  MessageCircle, 
  User, 
  Phone, 
  AlertTriangle,
  CheckCircle,
  Package
} from "lucide-react";
import { format } from "date-fns";

export default function ConversationReview() {
  const navigate = useNavigate();
  const [order, setOrder] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  
  useEffect(() => {
    const urlParams = new URLSearchParams(window.location.search);
    const orderId = urlParams.get('orderId');
    if (orderId) {
      loadOrder(orderId);
    } else {
      setIsLoading(false);
    }
  }, []);

  const loadOrder = async (orderId) => {
    setIsLoading(true);
    try {
      const orderData = await Order.get(orderId);
      setOrder(orderData);
    } catch (error) {
      console.error("Error loading order:", error);
    }
    setIsLoading(false);
  };

  const handleUpdateOrder = async (updates) => {
    if (!order) return;
    try {
      await Order.update(order.id, updates);
      await loadOrder(order.id);
    } catch (error) {
      console.error("Error updating order status:", error);
    }
  };

  if (isLoading) {
    return (
      <div className="p-8">
        <Skeleton className="h-8 w-1/4 mb-6" />
        <Skeleton className="h-96 w-full" />
      </div>
    );
  }

  if (!order) {
    return (
      <div className="p-8 text-center">
        <h2 className="text-2xl font-bold mb-4">Order not found</h2>
        <p className="text-gray-600 mb-6">The requested order could not be loaded.</p>
        <Link to={createPageUrl("Orders")}>
          <Button variant="outline">
            <ArrowLeft className="w-4 h-4 mr-2" />
            Back to Orders
          </Button>
        </Link>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 via-white to-green-50 p-4 lg:p-8">
      <div className="max-w-4xl mx-auto">
        <div className="mb-6">
          <Link to={createPageUrl("Orders")}>
            <Button variant="outline" className="mb-4">
              <ArrowLeft className="w-4 h-4 mr-2" />
              Back to All Orders
            </Button>
          </Link>
          <h1 className="text-3xl font-bold text-gray-900">Conversation Review</h1>
        </div>

        {order.needs_review && (
          <Card className="mb-6 bg-red-50 border-red-200">
            <CardHeader>
              <CardTitle className="flex items-center gap-2 text-red-800">
                <AlertTriangle className="w-5 h-5" />
                This order needs manual review
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-red-700 mb-4">
                <strong>Reason:</strong> {order.review_reason}
              </p>
              <div className="flex gap-2">
                <Button onClick={() => handleUpdateOrder({ needs_review: false })} className="bg-emerald-600 hover:bg-emerald-700">
                  <CheckCircle className="w-4 h-4 mr-2" />
                  Approve Order
                </Button>
                <Button variant="outline" className="bg-white">Edit Order (coming soon)</Button>
              </div>
            </CardContent>
          </Card>
        )}
        
        <div className="grid lg:grid-cols-3 gap-6">
          <div className="lg:col-span-2">
            <Card className="bg-white/80 backdrop-blur-sm">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <MessageCircle className="w-5 h-5" />
                  Transcript
                </CardTitle>
              </CardHeader>
              <CardContent>
                <ConversationView transcript={order.conversation_transcript} />
              </CardContent>
            </Card>
          </div>
          
          <div className="space-y-6">
            <Card className="bg-white/80 backdrop-blur-sm">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <User className="w-5 h-5" />
                  Customer Info
                </CardTitle>
              </CardHeader>
              <CardContent>
                <p className="font-semibold">{order.customer_name}</p>
                <p className="text-sm text-gray-600 flex items-center gap-2">
                  <Phone className="w-3 h-3" />
                  {order.customer_phone}
                </p>
              </CardContent>
            </Card>

            <Card className="bg-white/80 backdrop-blur-sm">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Package className="w-5 h-5" />
                  Order Summary
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-2">
                  {order.order_items.map((item, index) => (
                    <div key={index} className="flex justify-between text-sm">
                      <span>{item.quantity}x {item.product_name}</span>
                      <span className="font-medium">${item.total_price.toFixed(2)}</span>
                    </div>
                  ))}
                  <div className="border-t pt-2 mt-2 flex justify-between font-bold">
                    <span>Total</span>
                    <span>${order.total_amount.toFixed(2)}</span>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
}