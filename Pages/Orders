import React, { useState, useEffect } from "react";
import { Order } from "@/entities/Order";
import { Card } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { 
  Search, 
  Filter,
  Clock,
  CheckCircle,
  Package,
  Truck,
  AlertTriangle,
  Phone,
  Calendar,
  DollarSign
} from "lucide-react";
import OrderCard from "../components/orders/OrderCard";
import OrderFilters from "../components/orders/OrderFilters";

const statusTabs = [
  { value: "all", label: "All Orders", icon: Package },
  { value: "pending", label: "Pending", icon: Clock },
  { value: "needs_review", label: "Review", icon: AlertTriangle },
  { value: "confirmed", label: "Confirmed", icon: CheckCircle },
  { value: "preparing", label: "Preparing", icon: Package },
  { value: "ready", label: "Ready", icon: Truck },
];

export default function Orders() {
  const [orders, setOrders] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [activeTab, setActiveTab] = useState("all");
  const [searchQuery, setSearchQuery] = useState("");
  const [showFilters, setShowFilters] = useState(false);

  useEffect(() => {
    loadOrders();
  }, []);

  const loadOrders = async () => {
    setIsLoading(true);
    try {
      const data = await Order.list("-created_date");
      setOrders(data);
    } catch (error) {
      console.error("Error loading orders:", error);
    }
    setIsLoading(false);
  };

  const handleUpdateOrder = async (orderId, updates) => {
    try {
      await Order.update(orderId, updates);
      await loadOrders();
    } catch (error) {
      console.error("Error updating order:", error);
    }
  };

  // Filter orders based on active tab and search
  const filteredOrders = orders.filter(order => {
    const matchesTab = activeTab === "all" || 
                      (activeTab === "needs_review" && order.needs_review) ||
                      (activeTab !== "needs_review" && order.status === activeTab);
    
    const matchesSearch = !searchQuery || 
                         order.customer_name?.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         order.customer_phone?.includes(searchQuery);
    
    return matchesTab && matchesSearch;
  });

  const getTabCount = (tabValue) => {
    if (tabValue === "all") return orders.length;
    if (tabValue === "needs_review") return orders.filter(o => o.needs_review).length;
    return orders.filter(o => o.status === tabValue).length;
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 via-white to-green-50 p-4 lg:p-8">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-3xl lg:text-4xl font-bold text-gray-900 mb-2">Orders</h1>
          <p className="text-lg text-gray-600">Manage all your WhatsApp orders</p>
        </div>

        {/* Search and Filters */}
        <Card className="p-6 mb-6 bg-white/80 backdrop-blur-sm">
          <div className="flex flex-col lg:flex-row gap-4">
            <div className="flex-1 relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
              <Input
                placeholder="Search by customer name or phone..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="pl-10 h-12 text-lg"
              />
            </div>
            <Button
              variant="outline"
              onClick={() => setShowFilters(!showFilters)}
              className="h-12 px-6"
            >
              <Filter className="w-5 h-5 mr-2" />
              Filters
            </Button>
          </div>
          
          {showFilters && (
            <div className="mt-4 pt-4 border-t border-gray-200">
              <OrderFilters />
            </div>
          )}
        </Card>

        {/* Status Tabs */}
        <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
          <TabsList className="grid w-full grid-cols-3 lg:grid-cols-6 h-auto p-1 bg-white/80 backdrop-blur-sm">
            {statusTabs.map((tab) => {
              const TabIcon = tab.icon;
              const count = getTabCount(tab.value);
              
              return (
                <TabsTrigger
                  key={tab.value}
                  value={tab.value}
                  className={`flex flex-col lg:flex-row items-center gap-2 p-4 data-[state=active]:bg-emerald-100 data-[state=active]:text-emerald-700 ${
                    tab.value === 'needs_review' && count > 0 ? 'data-[state=inactive]:bg-red-50 data-[state=inactive]:text-red-700' : ''
                  }`}
                >
                  <TabIcon className="w-5 h-5" />
                  <div className="text-center lg:text-left">
                    <div className="font-medium">{tab.label}</div>
                    <Badge variant="secondary" className="mt-1 lg:ml-2 lg:mt-0">
                      {count}
                    </Badge>
                  </div>
                </TabsTrigger>
              );
            })}
          </TabsList>

          {statusTabs.map((tab) => (
            <TabsContent key={tab.value} value={tab.value} className="space-y-4">
              {isLoading ? (
                <div className="grid gap-4">
                  {Array(3).fill(0).map((_, i) => (
                    <Card key={i} className="p-6 animate-pulse">
                      <div className="h-4 bg-gray-200 rounded w-1/4 mb-4"></div>
                      <div className="h-3 bg-gray-200 rounded w-1/2 mb-2"></div>
                      <div className="h-3 bg-gray-200 rounded w-1/3"></div>
                    </Card>
                  ))}
                </div>
              ) : filteredOrders.length === 0 ? (
                <Card className="p-12 text-center bg-white/80 backdrop-blur-sm">
                  <Package className="w-16 h-16 text-gray-300 mx-auto mb-4" />
                  <h3 className="text-xl font-semibold text-gray-600 mb-2">No Orders Found</h3>
                  <p className="text-gray-500">
                    {searchQuery ? "Try adjusting your search terms" : "Orders will appear here once customers start messaging"}
                  </p>
                </Card>
              ) : (
                <div className="grid gap-4">
                  {filteredOrders.map((order) => (
                    <OrderCard
                      key={order.id}
                      order={order}
                      onUpdate={handleUpdateOrder}
                    />
                  ))}
                </div>
              )}
            </TabsContent>
          ))}
        </Tabs>
      </div>
    </div>
  );
}